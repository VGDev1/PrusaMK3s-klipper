## DO NOT EDIT THIS FILE, IT IS A TEMPLATE. THAT YOU NEED TO COPY
# Prusa MK3s Klipper Config

# The first thing you'll need to do is go through this file and comment out / uncomment
# the files and/or settings you need.

# You'll be able to print just fine with this config as it is, but it is recommended
# that you follow these steps to properly calibrate your printer:

# 0) Sanity check and PID Tuning: https://www.klipper3d.org/Config_checks.html
# 1) Pressure Advance: https://www.klipper3d.org/Pressure_Advance.html
# 2) Skew Correction: https://www.klipper3d.org/skew_correction.html
# 3) Resonance Compensation: https://www.klipper3d.org/Resonance_Compensation.html

# Read more about klipper here: https://www.klipper3d.org/Overview.html

### UI
[include mainsail.cfg]
# [include fluidd.cfg]

[mcu]
# serial: /dev/serial0 # If you are using internal RPI serial port
serial: /dev/ttyACM0 # If you are using RPI via USB connection to printer
#serial: /dev/serial/by-id/usb-Prusa_Research__prusa3d.com__Original_Prusa_i3_MK3_CZPX3421X004XK05457-if00
restart_method: command

# adxl
#[include pico.cfg]

### CONTROL BOARD
[include klipper-prusa-mk3s/mk3s/einsy-rambo.cfg]

### BASE SETUP
[include klipper-prusa-mk3s/mk3s/display.cfg]
[include klipper-prusa-mk3s/mk3s/steppers.cfg]
[include klipper-prusa-mk3s/mk3s/tmc2130.cfg]

### EXTRUSION

# Extruder
[include klipper-prusa-mk3s/extruders/prusa.cfg]
# [include klipper-prusa-mk3s/extruders/bmg.cfg]

# Hotend
[include klipper-prusa-mk3s/hotends/v6.cfg]
# [include klipper-prusa-mk3s/hotends/dragon-standard-flow.cfg]
# [include klipper-prusa-mk3s/hotends/rapido.cfg]

[extruder]
# To tune Pressure Advance see https://www.klipper3d.org/Pressure_Advance.html
# default is already set based on hotend, but you can further improve prints by calibrating it to your nozzle and material
# pressure_advance: 0.05
nozzle_diameter: 0.4 # Remember to change this if you change nozzle diameter.
pid_Kp: 30.933
pid_Ki: 3.618
pid_Kd: 66.119

## copy this from your current setting on Prusa, but make it absolute (removing -)
[probe]
z_offset = 1.785

## For faster printing enable
[printer]
max_velocity: 300
max_accel: 4000
max_accel_to_decel: 4000
max_z_velocity: 40
max_z_accel: 300

[input_shaper]
shaper_type_x: 2hump_ei
shaper_freq_x: 76.2
shaper_type_y: 2hump_ei
shaper_freq_y: 61.2

[exclude_object]

## For stealth mode enable

#[tmc2130 stepper_x]
#interpolate: True
#stealthchop_threshold: 80
#[tmc2130 stepper_y]
#interpolate: True
#stealthchop_threshold: 80
# [tmc2130 stepper_z]
# interpolate: True
# stealthchop_threshold: 80

## Custom bed mest probes
## Prusa has 3x3 or 7x7, you can do any variation you want
[bed_mesh]
probe_count: 5,5

# Linear correction
# Check `extruders/linear-correction` for more informations.
[include klipper-prusa-mk3s/extruders/linear-correction/linear-correction-0.cfg] # Default Prusa linear correction optimized for LDO motors

### MACROS
[include klipper-prusa-mk3s/macros.cfg]

[gcode_macro ADAPTIVE_PURGE]
description: A purge macro that adapts to be near your actual printed objects

variable_adaptive_enable: False      # Change to False if you'd like the purge to be in the same spot every print
variable_z_height: 0.3              # Height above the bed to purge
variable_tip_distance: 6           # Distance between filament tip and nozzle before purge (this will require some tuning)
variable_purge_amount: 20           # Amount of filament to purge
variable_flow_rate: 5              # Desired flow rate in mm3/s
variable_x_default: 10              # X location to purge, overwritten if adaptive is True
variable_y_default: 10              # Y location to purge, overwritten if adaptive is True
variable_size: 10                   # Size of the logo
variable_distance_to_object_x: 10   # Distance in x to the print area
variable_distance_to_object_y: 10   # Distance in y to the print area

gcode:
    {% if adaptive_enable == True %}
        {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
        {% set x_origin = (all_points | map(attribute=0) | min | default(x_default + distance_to_object_x + size)) - distance_to_object_x - size %}
        {% set y_origin = (all_points | map(attribute=1) | min | default(y_default + distance_to_object_y + size)) - distance_to_object_y - size %}
        {% set x_origin = ([x_origin, 0] | max) %}
        {% set y_origin = ([y_origin, 0] | max) %}
    {% else %}
        {% set x_origin = x_default | float %}
        {% set y_origin = y_default | float %}
    {% endif %}
    {% set purge_move_speed = 2.31 * size * flow_rate / (purge_amount * 2.405) %}
    {% set prepurge_speed = flow_rate / 2.405 %}
    {% set travel_speed = printer.toolhead.max_velocity %}
    { action_respond_info( "x: " + x_origin|string + " y: " + y_origin|string + " purge_move_speed: " + purge_move_speed|string + " prepurge_speed: " + prepurge_speed|string ) }

    G92 E0
    G0 F{travel_speed*60}                                                               # Set travel speed
    G90                                                                                 # Absolute positioning
    G0 X{x_origin} Y{y_origin+size/2}                                                   # Move to purge position
    G0 Z{z_height}                                                                      # Move to purge Z height
    M83                                                                                 # Relative extrusion mode
    G1 E{tip_distance} F{prepurge_speed*60}                                             # Move tip of filament to nozzle
    G1 X{x_origin+size*0.289} Y{y_origin+size} E{purge_amount/4} F{purge_move_speed*60} # Purge first line of logo
    G1 E-.5 F2100                                                                       # Retract
    G0 Z{z_height*2}                                                                    # Z hop
    G0 X{x_origin+size*0.789} Y{y_origin+size}                                          # Move to second purge line origin
    G0 Z{z_height}                                                                      # Move to purge Z height
    G1 E.5 F2100                                                                        # Recover
    G1 X{x_origin+size*0.211} Y{y_origin} E{purge_amount/2} F{purge_move_speed*60}      # Purge second line of logo
    G1 E-.5 F2100                                                                       # Retract
    G0 Z{z_height*2}                                                                    # Z hop
    G0 X{x_origin+size*0.711} Y{y_origin}                                               # Move to third purge line origin
    G0 Z{z_height}                                                                      # Move to purge Z height
    G1 E.5 F2100                                                                        # Recover
    G1 X{x_origin+size} Y{y_origin+size/2}  E{purge_amount/4} F{purge_move_speed*60}    # Purge third line of logo
    G1 E-.5 F2100                                                                       # Retract
    G92 E0                                                                              # Reset extruder distance
    M82                                                                                 # Absolute extrusion mode
    G0 Z{z_height*2}     


[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
; gcode parameters
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 2
; minimum probe count
variable_min_probe_count : 4
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0
; enable preference index
variable_enable_reference_index : False
gcode:
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}

	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
        {% else %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% endif %}

	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	    {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	    {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            {% set algorithm = "bicubic" %}
	    {% if "algorithm" in bedMeshConfig %}
	        {% set algorithm = bedMeshConfig.algorithm %}
            {% endif %}
            {% if meshPointX >=7 or meshPointY >=7 %}
                {% set algorithm = "bicubic" %}
            {% endif %}

            {% if enable_reference_index %}
                {% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
            {% else %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
            {% endif %}
        {% else %}
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE_BASE
    {% endif %}

[gcode_macro PRINT_START]
; gcode parameters for area bed mesh
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
    G28  

    {% set MATERIAL = params.MATERIAL|default("PLA")|string %}

    M117 Heating bed
    M190 S{ params.BED }       ; Wait for bed to get to target temperature.

    M117 Preheating nozzle
    M109 S150                  ; Wait for nozzle to heat to 150C - soften filament, but no oozing.

    M117 Calibrating bed mesh
    BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}

    M117 Heating nozzle
    M109 S{ params.HOTEND }  ; Wait for nozzle to get to target temperature.

    M117 Priming nozzle
    ADAPTIVE_PURGE

    M117 Printing


[gcode_macro PRINT_END]
gcode:   
    SAVE_GCODE_STATE NAME=PRINT_END_STATE
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F3600                 ; retract filament
    G91                            ; relative positioning

    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    {% set z_park_abs = printer.toolhead.position.z + 25.0 %}
    {% if z_park_abs > max_z %}
        {% set z_park_abs = max_z %}
    {% endif %}

    G0 Z{z_safe} F3600               ; move nozzle up
    G0 X{x_safe} Y{y_safe} F18000    ; move nozzle to remove stringing
    G1 E-2 F3600                     ; retract filament another 2mm 
    TURN_OFF_HEATERS
    M107                             ; clear screen
    G90                              ; absolute positioning
    G0 Z{z_park_abs} F3600           ; move nozzle up away from the print
    G0 X{max_x / 2} Y{max_y-10} F18000  ; park nozzle at rear
    SET_EXHAUST TEMPERATURE=25

    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=PRINT_END_STATE
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0.25

    M117 Done